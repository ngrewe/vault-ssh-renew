trigger:
  branches:
    include:
    - "*"
  tags:
    include:
    - "v*"
pr:
  branches:
    include:
    - '*'
schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
      - master
resources:
  repositories:
  - repository: tox
    type: github
    endpoint: ngrewe
    name: tox-dev/azure-pipelines-template
    ref: refs/tags/0.2
stages:
  - stage: test
    displayName: Run Tests
    jobs:
    - template: run-tox-env.yml@tox
      parameters:
        tox_version: 'tox'
        jobs:
          py37_black:
            image: [linux]
          py38:
            image: [linux]
          py37:
            image: [linux]
          py36:
            image: [linux]
        coverage:
          with_toxenv: 'coverage'
          for_envs: [py38, py37, py36]
  - stage: build
    displayName: Build Packages
    dependsOn: test
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-18.04'
    jobs:
    - job: docker_image
      displayName: Build Docker Image
      variables:
        imageName: 'glaux/vault-ssh-renew'
      steps:
        - task: Docker@2
          displayName: Build Docker Image
          inputs:
            repository: $(imageName)
            command: build
            Dockerfile: Dockerfile
        - script: docker save $(imageName):$(Build.BuildId) | gzip > docker-image.tar.gz
          displayName: 'Archive Docker Image'
        - publish: docker-image.tar.gz
          name: docker_image
    - job: python_dist
      displayName: Build Python Distributions
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.7'
            addToPath: true
            architecture: 'x64'
        - script: python -m pip install poetry
          displayName: 'Install build tools'
        - script: poetry build
          displayName: Build Distributions
        - publish: dist
          name: python_dists
          displayName: Publish Distributions
    - job: deb
      displayName: Build Debian Package
      dependsOn: [python_dist]
      pool:
        vmImage: 'Ubuntu-16.04'
      steps:
        - download: current
          artifact: build.pythondist
          displayName: Download Python Distributions
        - script: tar xzf $(Pipeline.Workspace)/build.pythondist/*.tar.gz
          displayName: Decompress sdist
        - script: cp -r debian vault-ssh-renew-*/
          displayName: Bring Debian Control Files into Place
        - script: |
            sudo apt-get update -qq
            sudo apt-get install -yqq debhelper dh-systemd python3-all python3-setuptools
          displayName: Install Debian Packaging Tools
        - bash: |
            pushd vault-ssh-renew-*
            dpkg-buildpackage -uc -us
            popd
          displayName: Build Debian Package
        - publish: vault-ssh-renew-*.deb
          name: debian_pkg
          displayName: Publish Debian Package

  - stage: publish
    displayName: Publish Packages
    dependsOn: build
    condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    pool:
      vmImage: 'ubuntu-18.04'
    jobs:
      - job: docker_publish
        displayName: Publish Docker Image
        variables:
          imageName: 'glaux/vault-ssh-renew'
        steps:
          - download: current
            artifact: build.dockerimage
            displayName: Download Docker Image
          - script: gunzip -c $(Pipeline.Workspace)/build.dockerimage/docker-image.tar.gz | docker import - $(imageName):$(Build.BuildId)
            displayName: Import Image Into Daemon
          - script: docker tag $(imageName):$(Build.BuildId) $(imageName):$(Build.SourceBranchName)
            displayName: Tag Image
          - task: Docker@1
            displayName: Push image
            inputs:
              command: push
              containerregistrytype: Container Registry
              dockerRegistryEndpoint: glaux-registry
              imageName: $(imageName):$(Build.SourceBranchName)
      - job: pypi_publish
        displayName: Publish PyPi Packages
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7'
              addToPath: true
              architecture: 'x64'
          - script: python -m pip install twine
            displayName: Install Publishing Tools
          - download: current
            artifact: build.pythondist
            displayName: Download Python Distributions
          - task: TwineAuthenticate@1
            displayName: Authenticate PyPi Service Connection
            inputs:
              pythonUploadServiceConnection: 'Azure PyPi'
          - script: |
              python -m twine upload --skip-existing --verbose --repository azure-pypi --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/build.pythondist/*.*
            displayName: Publish to PyPi
      - job: github_publish
        displayName: Publish Github Release
        steps:
          - download: current
            artifact: build.pythondist
            displayName: Download Python Distributions
          - task: GithubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: github.com_ngrewe
              repositoryName: ngrewe/vault-ssh-renew
              assets: $(Pipeline.Workspace)/build.pythondist/*
